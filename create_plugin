#!/bin/bash
# Software License Agreement (BSD License)
#
# Copyright (c) 2013-2015, G.A. vd. Hoorn, TU Delft Robotics Institute
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of the TU Delft Robotics Institute nor the names
#    of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written
#    permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# Usage
#
#    create_plugin DAE
#

confirm () {
    # call with a prompt string or use a default
    read -r -p "${1:-Are you sure? [Y/n]} " response
    case $response in
        [yY][eE][sS]|[yY])
            true
            ;;
        *)
            false
            ;;
    esac
}


# check command line params
if [ $# -ne 2 ]; then
  echo -e "Usage: `basename ${0}` DAE IKFAST_CPP\n"
  exit 64
fi

# check file exists
if [ ! -e "${1}" ]; then
  echo -e "No such file '${1}'\n"
  exit 74
fi

# check file exists
if [ ! -e "${2}" ]; then
  echo -e "No such file '${2}'\n"
  exit 74
fi


#
PLANNING_GROUP="manipulator"
IKFAST_TYPE="transform6d"

DAE_ABS_PATH=`readlink -e ${1}`
IKFAST_CPP_ABS_PATH=`readlink -e ${2}`

ROBOT_NAME=`grep 'node id="visual0' "${DAE_ABS_PATH}" | cut -d '"' -f 4`
ROBOT_INFO_TXT=`openrave0.8-robot.py --info=links "${DAE_ABS_PATH}"`
BASELINK_IDX=`echo "${ROBOT_INFO_TXT}" | grep '^base_link' | tr -s ' ' | cut -d ' ' -f 2`
EELINK_IDX=`echo "${ROBOT_INFO_TXT}" | grep '^tool0' | tr -s ' ' | cut -d ' ' -f 2`
PLUGIN_PKG_NAME="${ROBOT_NAME}_ikfast_${PLANNING_GROUP}_plugin"


# see if this is a 5dof manipulator
# TODO: make more robust
if [ "${EELINK_IDX}" -eq "6" ]; then
  IKFAST_TYPE="translationdirection5d"
  echo "Switching to ${IKFAST_TYPE} as IKFast type (eelink: ${EELINK_IDX})"
fi


# overview
echo
echo "Using following values:"
echo "  dae path        : ${DAE_ABS_PATH}"
echo "  ikfast cpp path : ${IKFAST_CPP_ABS_PATH}"
echo "  robot name      : ${ROBOT_NAME}"
echo "  planning group  : ${PLANNING_GROUP}"
echo "  ikfast type     : ${IKFAST_TYPE}"
echo "  plugin pkg name : ${PLUGIN_PKG_NAME}"
echo


# ask user
confirm "Continue with plugin creation? [Y/n]"
if [ $? -ne 0 ]; then
  echo -e "Aborting\n"
  exit 0
fi


echo
echo
echo "-------------------------------------------------------------------"
echo
echo "Creating package (if necessary) in current directory"
echo
echo "-------------------------------------------------------------------"
echo


# update
rospack profile >> /dev/null 2>&1

# check
rospack find ${PLUGIN_PKG_NAME} >> /dev/null 2>&1
if [ $? -ne 0 ]; then
  # create new pkg if it doesn't exist
  echo -e "Cannot find plugin package '${PLUGIN_PKG_NAME}'.\n"
  confirm "Shall I create it? [Y/n]"
  if [ $? -ne 0 ]; then
    echo -e "Aborting\n"
    exit 0
  fi

  catkin_create_pkg -V 0.1.0 -l BSD ${PLUGIN_PKG_NAME} >> /dev/null 2>&1
  exit_stat=$?
  if [ $exit_stat -ne 0 ]; then
    echo -e "\nError creating plugin package, aborting"
    exit $exit_stat
  fi

  # temporarily add new plugin pkg to the pkg path (changes are local to
  # this script)
  export ROS_PACKAGE_PATH=$(pwd)/${PLUGIN_PKG_NAME}:$ROS_PACKAGE_PATH

else
  # found an existing package, ask user whether we should use it
  confirm "Found existing package '${PLUGIN_PKG_NAME}'. Populate it with plugin files? [Y/n]"
  if [ $? -ne 0 ]; then
    echo -e "Aborting\n"
    exit 0
  fi

fi


# make sure we can find the package in any case
rospack find ${PLUGIN_PKG_NAME} >> /dev/null 2>&1
if [ $? -ne 0 ]; then
  echo "(still) cannot find plugin package '${PLUGIN_PKG_NAME}'."
  echo "Cannot continue."
  exit 78
fi





echo
echo
echo "-------------------------------------------------------------------"
echo
echo "Done. Creating the plugin. Invoking create_ikfast_moveit_plugin.py"
echo
echo "-------------------------------------------------------------------"
echo


# create actual plugin
rosrun moveit_ikfast create_ikfast_moveit_plugin.py \
  ${ROBOT_NAME} \
  ${PLANNING_GROUP} \
  ${PLUGIN_PKG_NAME} \
  ${IKFAST_CPP_ABS_PATH}


echo
echo
echo "-------------------------------------------------------------------"
echo
echo "Done."
echo
echo "-------------------------------------------------------------------"
echo


# ask user
echo
confirm "Fixup CMakeLists.txt? [Y/n]"
if [ $? -ne 0 ]; then
  echo -e "Aborting\n"
  exit 0
fi


OLD_DESC_PKG_NAME="${ROBOT_NAME}_moveit_ikfast_plugin_description"
NEW_DESC_PKG_NAME="${ROBOT_NAME}_manipulator_moveit_ikfast_plugin_description"

sed -i "s/${OLD_DESC_PKG_NAME}/${NEW_DESC_PKG_NAME}/g" ${PLUGIN_PKG_NAME}/CMakeLists.txt


echo
echo
echo "-------------------------------------------------------------------"
echo
echo "Done."
echo
echo "-------------------------------------------------------------------"
echo
